[tool.poetry]
name = "gui_client"
version = "0.1.0"
description = ""
authors = ["Anton Zimin <zimkaa87@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.7.3"
pydantic-settings = "^2.3.0"
tomli = "^2.0.1"
pyyaml = "^6.0.1"
sentry-sdk = "^2.4.0"
aiohttp = "^3.9.5"
dependency-injector = "^4.41.0"
tenacity = "^8.3.0"
pandas = "^2.2.2"
lxml = "^5.2.2"
flet = "^0.23.2"

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pytest = "^8.2.1"
pre-commit = "^3.7.1"
vulture = "^2.11"
ruff = "^0.5.4"
pytest-asyncio = "^0.23.8"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "-vvv"
asyncio_mode="auto"
cache_dir = "/tmp/pytest_cache"
testpaths = [
    "tests",
]

[tool.ruff]
cache-dir = "/tmp/ruff_cache"
fix = true
line-length = 120
unsafe-fixes = true
exclude = [
    "alembic/",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    # project specific
    "INFO/"
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",  # all docstrings issues
    "TRY401",  # exception logging
    "TCH003",  # Move standard library import {} into a type-checking block
    "S101",  # using assert
    "ANN101",  # self annotation
    "ANN102",  # cls annotation
    "EXE002",  # executable
    # project specific
    "ANN002",  # args annotation
    "ANN003",  # kwargs annotation
    "S311",  # use random values
]
exclude = []

[tool.ruff.lint.isort]
no-lines-before = ["standard-library", "local-folder"]
known-third-party = []
known-local-folder = ["src"]
lines-after-imports = 2
force-single-line = true

[tool.ruff.lint.extend-per-file-ignores]
"tests/*.py" = ["ANN101", "S101", "S311"]
"logger/custom.py" = ["A003", "PERF403"]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
cache_dir = "/tmp/mypy_cache"
disable_error_code = "import-untyped"
exclude = [
    "~/.pyenv/*",
    ".venv/",
    "alembic/",
    # project specific
    "INFO/*"
]
ignore_missing_imports = true
python_version = "3.11"
plugins = [
    "pydantic.mypy",
]
strict = false

[tool.pyright]
ignore = []
include = ["src"]
pythonVersion = "3.11"
reportInvalidTypeForm = "none"

[tool.vulture]
exclude = [
    # project specific
    "src/infrastructure/flet_comp/element/main.py",
    "src/infrastructure/flet_comp/component/main.py",
    "src/infrastructure/flet_comp/element/login.py",
    "src/domain/item/actions.py",
    "src/domain/item/base.py",
    "src/domain/item/property.py",
    "src/domain/item/name.py",
    "src/domain/item/requirements.py",
    "src/use_cases/game/game.py",
    "src/domain/person/name.py",
    "src/domain/pattern/inv/pattern.py",
    "src/use_cases/game/base.py",
    "src/infrastructure/utils/enums.py",
    "src/infrastructure/flet_comp/root.py",
    "src/infrastructure/flet_comp/component/login.py",
    # OLD
    "src/domain/pattern/inv/compiled.py",
    "src/use_cases/item/base.py",
    "src/domain/value_object/base.py",
    "src/domain/value_object/classes.py",
    "src/use_cases/person/base.py",
    "src/game.py",
    "src/infrastructure/errors/game.py",
    "src/infrastructure/errors/request.py",
    "src/domain/value_object/schemas/data_schema.py",
    "src/domain/pattern/fight/compiled.py",
    "src/config/settings.py",
    "src/application/app.py",
    "src/domain/pattern/fight/pattern.py",
    "src/infrastructure/flet_comp/component/textfield.py",
    "src/domain/pattern/person/compiled.py",
    "src/config/game/urls.py",
    "src/config/game/persons.py",
    "src/config/game/ip.py",
    "src/application/deps/main.py",
    "src/domain/pattern/effect/compiled.py",
    "src/domain/pattern/location/compiled.py",
    "src/domain/pattern/effect/pattern.py",
    "src/domain/pattern/chat/compiled.py",
    "src/config/game/url_encode.py",
    "src/infrastructure/request/nl.py",
    "src/infrastructure/errors/exception.py",
    "src/infrastructure/connection.py",
    "src/use_cases/request/base.py",
    "src/use_cases/person/parameter.py",
    "src/domain/pattern/location/pattern.py:",
    "src/domain/pattern/person/pattern.py",
    "src/domain/pattern/location/pattern.py",
    "src/domain/pattern/chat/pattern.py",
    "src/config/game/constants.py",
    "src/config/game/connection.py",
]
paths = ["src"]
sort_by_size = true
# min_confidence = 80
ignore_names = [
    "model_config",  # pydantic
    # project specific
    "scroll",
    "adaptive",
    "vertical_alignment",
    "horizontal_alignment",
    "on_route_change",
    "on_view_pop",
    "e",
]
